#####################
# Macros and Tables #
#####################

### Interfaces ###
if_lo   = "lo0"
if_wan  = "pppoe0"
if_lan  = "em1"
if_wlan = "em2"

### Subnets and address ranges ###
# IPv4 loopback
net_lo    = "127.0.0.0/8"
# IPv4 multicast
multicast = "224.0.0.0/4"
# LAN subnet
net_lan   = "192.168.1.0/24"
# WLAN subnet
net_wlan  = "192.168.2.0/24"

### Port-based access control ###
# Allowed TCP ports from Internet (ssh treated separately, below)
ports_in_tcp = "{ auth }"
# Allowed UDP ports from Internet
ports_in_udp = "{ ntp }"
qbittorrent_port = "35237"

### Address tables ###
# Address groups which shouldn't be in circulation on the Internet
table <martians> const { 127.0.0.0/8 192.168.0.0/16 172.16.0.0/12 \
    10.0.0.0/8 169.254.0.0/16 192.0.2.0/24 0.0.0.0/8 }

# Table of ddresses that have attempted to brute-force attack our SSH
# service from the Internet, for blocking purposes.
table <wan_bruteforce> persist


##############
# pf Options #
##############

# Reject disallowed TCP and UDP connections without a RST/ICMP UNREACHABLE
set block-policy drop

# Log packet- and byte-count statistics for our Internet connection
set loginterface $if_wan

# Don't filter on loopback interface
set skip on $if_lo


#########################
# Traffic Normalisation #
#########################

# Replace TCP timestamps and IP identification fields with random values to
# compensate for less secure values that may be generated by other hosts.
# Also, lower the MSS for traversing TCP connections to 1440 because our
# PPPoE interface's MTU is lower than that of clients' LAN interfaces.
match on $if_wan scrub (reassemble tcp random-id max-mss 1440)


###############
# Translation #
###############

# LAN NAT
match out on $if_wan from $net_lan to !(if_wan) nat-to ($if_wan)

# WLAN NAT
match out on $if_wan from $net_wlan to !(if_wan) nat-to ($if_wan)


####################
# Packet Filtering #
####################

# Block everything unless we say otherwise
block all

# Prevent loopback address spoofing
antispoof quick for $if_lo

# Prevent spoofing where an antispoof rule wouldn't be a robust choice.
# However, this is incompatible with the bridged tap device configuration
# used for OpenVPN unless we set skip on one of the bridged interfaces.
block drop in quick from urpf-failed


### WAN interface ###

## Ingress

# Forward ports
pass in on $if_wan proto tcp from any to any port $qbittorrent_port rdr-to 192.168.1.254
pass in on $if_wan proto udp from any to any port $qbittorrent_port rdr-to 192.168.1.254

# Allow SSH access, but block any communications from hosts found trying to
# brute-force the SSH server...
block drop in quick on $if_wan inet from <wan_bruteforce>
pass in quick on $if_wan inet proto tcp from any to ($if_wan) \
    port 22 flags S/SFRA modulate state \
    (max-src-conn-rate 3/30, overload <wan_bruteforce> flush global)

# Necessary IPv4 ICMP types
pass in on $if_wan inet proto icmp from any to ($if_wan) \
    icmp-type { echoreq unreach redir timex paramprob } keep state

# Allow inbound connections on certain TCP and UDP ports
pass in on $if_wan inet proto tcp from any to ($if_wan) \
    port $ports_in_tcp modulate state flags S/SFRA
pass in on $if_wan inet proto udp from any to ($if_wan) \
    port $ports_in_udp keep state

block drop in on $if_wan inet from <martians> to any

## Egress
pass out on $if_wan inet from ($if_wan) to any modulate state \
    flags S/SA

block return out log on $if_wan inet from any to <martians>

### LAN interface ###

## Ingress
# Allow DHCP requests
pass in quick on $if_lan inet proto udp from { 0.0.0.0 $net_lan } \
    port 68 to { ($if_lan) 255.255.255.255 } port 67
# Just to make sure we don't accidentally lock ourselves out of SSH
pass in quick on $if_lan inet proto tcp from any to (self) port ssh \
    keep state flags S/SA
pass in on $if_lan

## Egress
pass out on $if_lan

### WLAN interface ###

## Ingress
# Allow DHCP requests
pass in quick on $if_lan inet proto udp from { 0.0.0.0 $net_wlan } \
    port 68 to { ($if_lan) 255.255.255.255 } port 67
pass in on $if_wlan

## Egress
pass out on $if_wlan
